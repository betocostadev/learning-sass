/* PARTIALS */
@import '_variables';
@import '_base';
@import '_mixins';

/*! SASS Comment <- This one is marked as Must appear. Even on the compressed file  */
// Single line comments like this never appear on the CSS after the convertion.
// Even in the expanded mode!
main {
  margin: 1rem 10%;
  section {
    article {
      p:nth-of-type(2) {
        font-weight: $font-medium;
      }
      p:nth-of-type(3) {
        font-weight: $font-strong;
      }
    }
  }
}

pre {
  font-family: $font-code;
  font-size: 1.5rem;
  overflow: auto;
  @include break (400px, 800px) {
    color: pink;
  }
}

section {
  margin: 2.5rem 1rem;
}

h1 {
  color: $secondaryFLight;
}

h2 {
  color: $secondaryFDark;
  border-bottom: 2px solid $secondaryFDark;
  padding-bottom: 0.5rem;
}

header {
  margin: 1rem;
  background-color: $indigo500;
  h2 {
    padding-bottom: 1rem;
  }
  nav {
    display: flex;
    background-color: darken($indigo900, 5%);
    h2 {
      border: none;
      display: none; // Hiding for small screen, will bring it back with the MQuery below
      @include break(1000px) {
        display: block;
      }
    }
    ul {
      justify-content: flex-end;
      list-style-type: none;
      padding: 0.1rem;
    }
    li {
      float: left;
      flex: 1;
      margin: 0.1rem;
      padding: 0.1rem;
      // Media query (On the mixin file)
      @include break(600px) {
        margin: 0.5rem;
      }
      @include break (1000px) {
        margin: 0.3rem 1rem;
      }
    }
    a {
      font-size: 1.1rem;
      letter-spacing: 0.1rem;
      font-weight: $font-medium;
      text-decoration: none;
      color: $primaryFontC;
      &:hover {
        color: $secondaryFLight;
      }
    }
  }
}

.nesting {
  margin: 1rem;
  padding: 1rem;
  background-color: $indigo300;
  h3 {
    font-size: 1.5rem;
    margin: 1rem;
  }
  .media {
    margin-left: 1rem;
    list-style-type: none;
    img {
      float: left;
      margin: 2rem;
      border: 2px solid $primaryFontC;
    }
    .item {
      margin: 0 2rem 3rem 0;
      border-top: 1px dotted $primaryFontC;
      a {
        text-decoration: none;
        color: $primaryFontC;
      }
      // Use referencing:
      &:last-of-type {
        border-bottom: 1px dotted $primaryFontC;
      }
      @include clearfix;
    }
  }
}

/* MIXINS */
// Import the mixin - use include
.placeOne {
  @include backImage('../img/vancouver.webp');
  padding: 1rem;
  h3 {
    font-size: 2rem;
    font-weight: $font-medium;
  }
}

.placeTwo {
  @include backImage('../img/toronto.webp', 400px);
  padding: 1rem;
  h3 {
    font-size: 2rem;
    font-weight: $font-medium;
  }
}

/* EXTENDS: Use a base class for an extend for another Class */
/* We will also use referencing. With &:hover */
// Base class
%btn-small {
  display: inline-block;
  margin: 1rem;
  padding: 0.5rem 1rem;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  border: none;
  border-radius: 4px;
  user-select: none;
  font-weight: $font-strong;
  color: $clr-btn-text;
  // Referencing parent selectors:
  &:hover {
    box-shadow: 2px 2px 4px 2px rgba(140,140,140,1);
  }
}

// Extending - Check the HTML, there is no need for btn-small in all buttons
.btn-small {
  @extend %btn-small;
  background: $clr-btn-default;
}
.btn-success {
  @extend %btn-small;
  background: $clr-btn-success;
}
.btn-danger {
  @extend %btn-small;
  background: $clr-btn-danger;
}
.btn-info {
  @extend %btn-small;
  background: $clr-btn-info;
}
.btn-disabled {
  @extend %btn-small;
  background: $clr-btn-disabled;
}

// Image grid - mixins in the _mixins file
.grid {
  @include clearfix;
  .item {
    float: left;
    @include imageGrid(4, 1%);
  }
  img {
    display: block;
    border-radius: nth($roundness, 1); // We could use only the variable, but this way, we are
    max-width: 100%; // ... telling SASS, get only the first value of the variable $roundness.
  }
}

// SASS Color modifying - A SASS feature. Look below.
.mathSass {
  clear: both;
  margin-top: 3rem;
  padding-top: 2rem;
  .table {
    width: 100%;
    font-family: $font-amatic;
    caption {
      font-size: 2.6rem;
      padding-bottom: 0.6rem;
    }
    > thead, tbody {
      padding: 0.5rem;
      font-size: 1.5rem;
      font-weight: $font-medium;
      > tr {
        > th, td {
          font-weight: 400;
          padding: 0.5rem;
          border-bottom: 1px solid $clr-lblue-500;
        }
      }
    }
    > thead > tr {
      background: $primaryFontC;
      color: $indigo900;
      > th {
        font-weight: $font-strong;
      }
      &:hover {
        // The Sass complement feature to change the color. Inverts the color below
        background: complement($color: #006fd6);
      }
    }
  }
}

// Colored list - Variable on _variables.scss
// from 1 'through' lenght($colored-list) - 5: number of itens on the $colored-list variable.
// Noticed that on the HTML file (around line 272) the list itens have values on their class names.
@for $liItem from 1 through length($colored-list) {
  .licol#{$liItem} {
    color: nth($colored-list , $liItem);
  }
}

// For Each Loop
// Besides the index variable created below, the other variables are on:
// line 39 - _variables.scss
@each $name in $color-btn-names {
  // We will need to create an Index to be used for the background-color
  $ind: index($color-btn-names , $name);
  .btn-#{$name} {
    @extend %btn-small;
    background-color: nth($color-btn-values , $ind);
  }
}
.btn-small {
  @extend %btn-small;
  background: $clr-btn-default;
}

// SASS MAP - Use an associative array:
$color-button: (
  colpink: $col-pink,
  colpurple: $col-deep-purple,
  colcyan: $col-cyan,
  colteal: $col-teal
);

// $key will have the index - could be any name;
// $value will have the values - could be any name;
@each $key, $value in $color-button {
  // We will NOT need index, since we are using the array above.
  .botones-#{$key} {
    @extend %btn-small;
    background-color: $value;
  }
}